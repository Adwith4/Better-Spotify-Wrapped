{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adwit\\\\Better-Spotify-Wrapped\\\\client\\\\src\\\\pages\\\\Slide3_Albums.jsx\",\n  _s = $RefreshSig$();\n// // src/pages/Slide3_Albums.jsx\n// import React, { useEffect, useState } from 'react';\n// import { Box, Text, Button, SimpleGrid } from '@chakra-ui/react';\n// import axios from 'axios';\n// import PageTransition from '../components/PageTransition';\n\n// function Slide3_Albums() {\n//   const [stats, setStats] = useState(null);\n//   const [quip, setQuip] = useState('');\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     const fetchAlbumsAndQuip = async () => {\n//       try {\n//         const statsRes = await axios.get('/api/stats/me');\n//         const userStats = Array.isArray(statsRes.data)\n//           ? statsRes.data[0]\n//           : statsRes.data;\n//         setStats(userStats);\n\n//         const quipRes = await axios.post('/api/generate-quip', {\n//           statDescription: `Your top albums are ${userStats.topAlbums.join(', ')}`,\n//         });\n//         setQuip(quipRes.data.quip);\n//       } catch (err) {\n//         setError('Failed to load top albums or generate quip.');\n//       }\n//     };\n//     fetchAlbumsAndQuip();\n//   }, []);\n\n//   const nextSlide = () => (window.location.href = '/slide4');\n\n//   if (error) {\n//     return (\n//       <PageTransition>\n//         <Text color=\"red.400\">{error}</Text>\n//       </PageTransition>\n//     );\n//   }\n\n//   if (!stats) {\n//     return (\n//       <PageTransition>\n//         <Text>Loading albums...</Text>\n//       </PageTransition>\n//     );\n//   }\n\n//   return (\n//     <PageTransition>\n//       <Box\n//         minH=\"100vh\"\n//         display=\"flex\"\n//         flexDirection=\"column\"\n//         alignItems=\"center\"\n//         justifyContent=\"center\"\n//         px={4}\n//       >\n//         <Text fontSize=\"3xl\" fontWeight=\"bold\" mb={4}>\n//           Your Top Albums\n//         </Text>\n//         <SimpleGrid columns={[1, 2, 3]} spacing={4} mb={6}>\n//           {stats.topAlbums.map((album) => (\n//             <Box\n//               key={album}\n//               borderWidth=\"1px\"\n//               borderColor=\"spotify.gray\"\n//               p={4}\n//               rounded=\"md\"\n//               textAlign=\"center\"\n//             >\n//               {album}\n//             </Box>\n//           ))}\n//         </SimpleGrid>\n//         <Text color=\"spotify.green\" fontStyle=\"italic\" textAlign=\"center\" mb={4}>\n//           {quip}\n//         </Text>\n//         <Button\n//           bg=\"spotify.green\"\n//           color=\"spotify.black\"\n//           _hover={{ bg: 'green.400', transform: 'scale(1.05)' }}\n//           onClick={nextSlide}\n//         >\n//           Next\n//         </Button>\n//       </Box>\n//     </PageTransition>\n//   );\n// }\n\n// export default Slide3_Albums;\nimport React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport PageTransition from '../components/PageTransition';\nimport Navigation from '../components/Navigation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Slide3_Albums() {\n  _s();\n  const [stats, setStats] = useState(null);\n  const [quip, setQuip] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchAlbumsAndQuip = async () => {\n      try {\n        const statsRes = await fetch('/api/stats/me');\n        const userStats = await statsRes.json();\n        const stats = Array.isArray(userStats) ? userStats[0] : userStats;\n        setStats(stats);\n        const quipRes = await fetch('/api/generate-quip', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            statDescription: `Your top albums are ${stats.topAlbums.join(', ')}`\n          })\n        });\n        const quipData = await quipRes.json();\n        setQuip(quipData.quip);\n      } catch (err) {\n        setError('Failed to load top albums or generate quip.');\n      }\n    };\n    fetchAlbumsAndQuip();\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(PageTransition, {\n      title: \"Error\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-400\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n  if (!stats) {\n    return /*#__PURE__*/_jsxDEV(PageTransition, {\n      title: \"Loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading albums...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(PageTransition, {\n    title: \"Your Top Albums\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center min-h-screen px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\",\n        children: stats.topAlbums.map((album, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0,\n            y: 20\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          transition: {\n            delay: index * 0.1\n          },\n          className: \"bg-spotify-gray/20 p-4 rounded-lg text-center\",\n          children: album\n        }, album, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-spotify-green italic text-center mb-4\",\n        children: quip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      currentSlide: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(Slide3_Albums, \"nDOaKaLQcQBTIbzQGXQ/RwTgZqo=\");\n_c = Slide3_Albums;\nexport default Slide3_Albums;\nvar _c;\n$RefreshReg$(_c, \"Slide3_Albums\");","map":{"version":3,"names":["React","useEffect","useState","motion","PageTransition","Navigation","jsxDEV","_jsxDEV","Slide3_Albums","_s","stats","setStats","quip","setQuip","error","setError","fetchAlbumsAndQuip","statsRes","fetch","userStats","json","Array","isArray","quipRes","method","headers","body","JSON","stringify","statDescription","topAlbums","join","quipData","err","title","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","album","index","div","initial","opacity","y","animate","transition","delay","currentSlide","_c","$RefreshReg$"],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/pages/Slide3_Albums.jsx"],"sourcesContent":["// // src/pages/Slide3_Albums.jsx\r\n// import React, { useEffect, useState } from 'react';\r\n// import { Box, Text, Button, SimpleGrid } from '@chakra-ui/react';\r\n// import axios from 'axios';\r\n// import PageTransition from '../components/PageTransition';\r\n\r\n// function Slide3_Albums() {\r\n//   const [stats, setStats] = useState(null);\r\n//   const [quip, setQuip] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const fetchAlbumsAndQuip = async () => {\r\n//       try {\r\n//         const statsRes = await axios.get('/api/stats/me');\r\n//         const userStats = Array.isArray(statsRes.data)\r\n//           ? statsRes.data[0]\r\n//           : statsRes.data;\r\n//         setStats(userStats);\r\n\r\n//         const quipRes = await axios.post('/api/generate-quip', {\r\n//           statDescription: `Your top albums are ${userStats.topAlbums.join(', ')}`,\r\n//         });\r\n//         setQuip(quipRes.data.quip);\r\n//       } catch (err) {\r\n//         setError('Failed to load top albums or generate quip.');\r\n//       }\r\n//     };\r\n//     fetchAlbumsAndQuip();\r\n//   }, []);\r\n\r\n//   const nextSlide = () => (window.location.href = '/slide4');\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <PageTransition>\r\n//         <Text color=\"red.400\">{error}</Text>\r\n//       </PageTransition>\r\n//     );\r\n//   }\r\n\r\n//   if (!stats) {\r\n//     return (\r\n//       <PageTransition>\r\n//         <Text>Loading albums...</Text>\r\n//       </PageTransition>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <PageTransition>\r\n//       <Box\r\n//         minH=\"100vh\"\r\n//         display=\"flex\"\r\n//         flexDirection=\"column\"\r\n//         alignItems=\"center\"\r\n//         justifyContent=\"center\"\r\n//         px={4}\r\n//       >\r\n//         <Text fontSize=\"3xl\" fontWeight=\"bold\" mb={4}>\r\n//           Your Top Albums\r\n//         </Text>\r\n//         <SimpleGrid columns={[1, 2, 3]} spacing={4} mb={6}>\r\n//           {stats.topAlbums.map((album) => (\r\n//             <Box\r\n//               key={album}\r\n//               borderWidth=\"1px\"\r\n//               borderColor=\"spotify.gray\"\r\n//               p={4}\r\n//               rounded=\"md\"\r\n//               textAlign=\"center\"\r\n//             >\r\n//               {album}\r\n//             </Box>\r\n//           ))}\r\n//         </SimpleGrid>\r\n//         <Text color=\"spotify.green\" fontStyle=\"italic\" textAlign=\"center\" mb={4}>\r\n//           {quip}\r\n//         </Text>\r\n//         <Button\r\n//           bg=\"spotify.green\"\r\n//           color=\"spotify.black\"\r\n//           _hover={{ bg: 'green.400', transform: 'scale(1.05)' }}\r\n//           onClick={nextSlide}\r\n//         >\r\n//           Next\r\n//         </Button>\r\n//       </Box>\r\n//     </PageTransition>\r\n//   );\r\n// }\r\n\r\n// export default Slide3_Albums;\r\nimport React, { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport PageTransition from '../components/PageTransition';\r\nimport Navigation from '../components/Navigation';\r\n\r\nfunction Slide3_Albums() {\r\n  const [stats, setStats] = useState(null);\r\n  const [quip, setQuip] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchAlbumsAndQuip = async () => {\r\n      try {\r\n        const statsRes = await fetch('/api/stats/me');\r\n        const userStats = await statsRes.json();\r\n        const stats = Array.isArray(userStats) ? userStats[0] : userStats;\r\n        setStats(stats);\r\n\r\n        const quipRes = await fetch('/api/generate-quip', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            statDescription: `Your top albums are ${stats.topAlbums.join(', ')}`,\r\n          }),\r\n        });\r\n        const quipData = await quipRes.json();\r\n        setQuip(quipData.quip);\r\n      } catch (err) {\r\n        setError('Failed to load top albums or generate quip.');\r\n      }\r\n    };\r\n    fetchAlbumsAndQuip();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return (\r\n      <PageTransition title=\"Error\">\r\n        <p className=\"text-red-400\">{error}</p>\r\n      </PageTransition>\r\n    );\r\n  }\r\n\r\n  if (!stats) {\r\n    return (\r\n      <PageTransition title=\"Loading\">\r\n        <p>Loading albums...</p>\r\n      </PageTransition>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PageTransition title=\"Your Top Albums\">\r\n      <div className=\"flex flex-col items-center justify-center min-h-screen px-4\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\r\n          {stats.topAlbums.map((album, index) => (\r\n            <motion.div\r\n              key={album}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className=\"bg-spotify-gray/20 p-4 rounded-lg text-center\"\r\n            >\r\n              {album}\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n        <p className=\"text-spotify-green italic text-center mb-4\">\r\n          {quip}\r\n        </p>\r\n      </div>\r\n      <Navigation currentSlide={3} />\r\n    </PageTransition>\r\n  );\r\n}\r\n\r\nexport default Slide3_Albums;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}