{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  withCredentials: true\n});\nlet cachedData = null;\nlet quipCooldown = false;\nexport const fetchSpotifyDataWithQuip = async () => {\n  var _spotifyData$data, _spotifyData$data$top;\n  if (cachedData) return cachedData;\n  if (quipCooldown) return cachedData; // Skip if cooldown is active\n\n  quipCooldown = true;\n  setTimeout(() => quipCooldown = false, 5000); // Cooldown for 5 seconds\n\n  const spotifyData = await api.get('/fetch-spotify-data');\n  if ((_spotifyData$data = spotifyData.data) !== null && _spotifyData$data !== void 0 && (_spotifyData$data$top = _spotifyData$data.topArtists) !== null && _spotifyData$data$top !== void 0 && _spotifyData$data$top.length) {\n    const artistNames = spotifyData.data.topArtists.map(artist => artist.name).slice(0, 5).join(', ');\n    try {\n      const quipResponse = await api.post('/generate-quip', {\n        statDescription: `Your top artists are: ${artistNames}`\n      });\n      cachedData = {\n        stats: spotifyData.data,\n        quip: quipResponse.data.quip\n      };\n    } catch (error) {\n      console.error('Error generating quip:', error);\n      cachedData = {\n        stats: spotifyData.data,\n        quip: ''\n      };\n    }\n  } else {\n    cachedData = {\n      stats: spotifyData.data,\n      quip: ''\n    };\n  }\n  return cachedData;\n};\nexport const fetchUserProfile = async () => {\n  const response = await api.get('/user-profile');\n  return response.data;\n};\nexport const fetchTopArtists = async () => {\n  const response = await api.get('/stats/me/artists');\n  return response.data;\n};\nexport const fetchTopTracks = async () => {\n  const response = await api.get('/stats/me/tracks');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","cachedData","quipCooldown","fetchSpotifyDataWithQuip","_spotifyData$data","_spotifyData$data$top","setTimeout","spotifyData","get","data","topArtists","length","artistNames","map","artist","name","slice","join","quipResponse","post","statDescription","stats","quip","error","console","fetchUserProfile","response","fetchTopArtists","fetchTopTracks"],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3001/api',\r\n  withCredentials: true,\r\n});\r\n\r\nlet cachedData = null;\r\nlet quipCooldown = false;\r\n\r\nexport const fetchSpotifyDataWithQuip = async () => {\r\n    if (cachedData) return cachedData;\r\n    if (quipCooldown) return cachedData; // Skip if cooldown is active\r\n\r\n    quipCooldown = true;\r\n    setTimeout(() => (quipCooldown = false), 5000); // Cooldown for 5 seconds\r\n\r\n    const spotifyData = await api.get('/fetch-spotify-data');\r\n    if (spotifyData.data?.topArtists?.length) {\r\n        const artistNames = spotifyData.data.topArtists\r\n            .map(artist => artist.name)\r\n            .slice(0, 5)\r\n            .join(', ');\r\n\r\n        try {\r\n            const quipResponse = await api.post('/generate-quip', {\r\n                statDescription: `Your top artists are: ${artistNames}`,\r\n            });\r\n            cachedData = {\r\n                stats: spotifyData.data,\r\n                quip: quipResponse.data.quip,\r\n            };\r\n        } catch (error) {\r\n            console.error('Error generating quip:', error);\r\n            cachedData = {\r\n                stats: spotifyData.data,\r\n                quip: '',\r\n            };\r\n        }\r\n    } else {\r\n        cachedData = {\r\n            stats: spotifyData.data,\r\n            quip: '',\r\n        };\r\n    }\r\n    return cachedData;\r\n};\r\n\r\nexport const fetchUserProfile = async () => {\r\n  const response = await api.get('/user-profile');\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTopArtists = async () => {\r\n  const response = await api.get('/stats/me/artists');\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTopTracks = async () => {\r\n  const response = await api.get('/stats/me/tracks');\r\n  return response.data;\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,IAAIC,UAAU,GAAG,IAAI;AACrB,IAAIC,YAAY,GAAG,KAAK;AAExB,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAAA,IAAAC,iBAAA,EAAAC,qBAAA;EAChD,IAAIJ,UAAU,EAAE,OAAOA,UAAU;EACjC,IAAIC,YAAY,EAAE,OAAOD,UAAU,CAAC,CAAC;;EAErCC,YAAY,GAAG,IAAI;EACnBI,UAAU,CAAC,MAAOJ,YAAY,GAAG,KAAM,EAAE,IAAI,CAAC,CAAC,CAAC;;EAEhD,MAAMK,WAAW,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,qBAAqB,CAAC;EACxD,KAAAJ,iBAAA,GAAIG,WAAW,CAACE,IAAI,cAAAL,iBAAA,gBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBM,UAAU,cAAAL,qBAAA,eAA5BA,qBAAA,CAA8BM,MAAM,EAAE;IACtC,MAAMC,WAAW,GAAGL,WAAW,CAACE,IAAI,CAACC,UAAU,CAC1CG,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAC1BC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,IAAI,CAAC,IAAI,CAAC;IAEf,IAAI;MACA,MAAMC,YAAY,GAAG,MAAMrB,GAAG,CAACsB,IAAI,CAAC,gBAAgB,EAAE;QAClDC,eAAe,EAAE,yBAAyBR,WAAW;MACzD,CAAC,CAAC;MACFX,UAAU,GAAG;QACToB,KAAK,EAAEd,WAAW,CAACE,IAAI;QACvBa,IAAI,EAAEJ,YAAY,CAACT,IAAI,CAACa;MAC5B,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CtB,UAAU,GAAG;QACToB,KAAK,EAAEd,WAAW,CAACE,IAAI;QACvBa,IAAI,EAAE;MACV,CAAC;IACL;EACJ,CAAC,MAAM;IACHrB,UAAU,GAAG;MACToB,KAAK,EAAEd,WAAW,CAACE,IAAI;MACvBa,IAAI,EAAE;IACV,CAAC;EACL;EACA,OAAOrB,UAAU;AACrB,CAAC;AAED,OAAO,MAAMwB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,QAAQ,GAAG,MAAM7B,GAAG,CAACW,GAAG,CAAC,eAAe,CAAC;EAC/C,OAAOkB,QAAQ,CAACjB,IAAI;AACtB,CAAC;AAED,OAAO,MAAMkB,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMD,QAAQ,GAAG,MAAM7B,GAAG,CAACW,GAAG,CAAC,mBAAmB,CAAC;EACnD,OAAOkB,QAAQ,CAACjB,IAAI;AACtB,CAAC;AAED,OAAO,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMF,QAAQ,GAAG,MAAM7B,GAAG,CAACW,GAAG,CAAC,kBAAkB,CAAC;EAClD,OAAOkB,QAAQ,CAACjB,IAAI;AACtB,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}