{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adwit\\\\Better-Spotify-Wrapped\\\\client\\\\src\\\\context\\\\SpotifyDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchSpotifyData } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyDataContext = /*#__PURE__*/createContext(null);\nexport const SpotifyDataProvider = ({\n  children\n}) => {\n  _s();\n  const [spotifyData, setSpotifyData] = useState({\n    topArtists: [],\n    topTracks: [],\n    listeningClock: {\n      morning: [],\n      afternoon: [],\n      evening: [],\n      night: []\n    },\n    monthlyTrends: Array(12).fill({\n      count: 0,\n      topTracks: []\n    }),\n    mostStreamedSong: null,\n    highestBpmTrack: null\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const data = await fetchSpotifyData();\n        setSpotifyData(data);\n      } catch (err) {\n        setError('Failed to load Spotify data');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SpotifyDataContext.Provider, {\n    value: {\n      spotifyData,\n      isLoading,\n      error,\n      setSpotifyData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(SpotifyDataProvider, \"ediBESPBqLfrCTdSjJD1bxxVNmg=\");\n_c = SpotifyDataProvider;\nexport const useSpotifyData = () => {\n  _s2();\n  const context = useContext(SpotifyDataContext);\n  if (!context) {\n    throw new Error('useSpotifyData must be used within SpotifyDataProvider');\n  }\n  return context;\n};\n_s2(useSpotifyData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SpotifyDataProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","fetchSpotifyData","jsxDEV","_jsxDEV","SpotifyDataContext","SpotifyDataProvider","children","_s","spotifyData","setSpotifyData","topArtists","topTracks","listeningClock","morning","afternoon","evening","night","monthlyTrends","Array","fill","count","mostStreamedSong","highestBpmTrack","isLoading","setIsLoading","error","setError","loadData","data","err","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSpotifyData","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/context/SpotifyDataContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { fetchSpotifyData } from '../utils/api';\r\n\r\nconst SpotifyDataContext = createContext(null);\r\n\r\nexport const SpotifyDataProvider = ({ children }) => {\r\n    const [spotifyData, setSpotifyData] = useState({\r\n        topArtists: [],\r\n        topTracks: [],\r\n        listeningClock: {\r\n            morning: [],\r\n            afternoon: [],\r\n            evening: [],\r\n            night: []\r\n        },\r\n        monthlyTrends: Array(12).fill({ count: 0, topTracks: [] }),\r\n        mostStreamedSong: null,\r\n        highestBpmTrack: null\r\n    });\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            try {\r\n                const data = await fetchSpotifyData();\r\n                setSpotifyData(data);\r\n            } catch (err) {\r\n                setError('Failed to load Spotify data');\r\n                console.error(err);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <SpotifyDataContext.Provider value={{\r\n            spotifyData,\r\n            isLoading,\r\n            error,\r\n            setSpotifyData\r\n        }}>\r\n            {children}\r\n        </SpotifyDataContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useSpotifyData = () => {\r\n    const context = useContext(SpotifyDataContext);\r\n    if (!context) {\r\n        throw new Error('useSpotifyData must be used within SpotifyDataProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,gBAAgB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,kBAAkB,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAE9C,OAAO,MAAMQ,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC;IAC3CW,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,cAAc,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE;IACX,CAAC;IACDC,aAAa,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAET,SAAS,EAAE;IAAG,CAAC,CAAC;IAC1DU,gBAAgB,EAAE,IAAI;IACtBC,eAAe,EAAE;EACrB,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAM2B,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAI;QACA,MAAMC,IAAI,GAAG,MAAM3B,gBAAgB,CAAC,CAAC;QACrCQ,cAAc,CAACmB,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVH,QAAQ,CAAC,6BAA6B,CAAC;QACvCI,OAAO,CAACL,KAAK,CAACI,GAAG,CAAC;MACtB,CAAC,SAAS;QACNL,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IACDG,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIxB,OAAA,CAACC,kBAAkB,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAChCxB,WAAW;MACXe,SAAS;MACTE,KAAK;MACLhB;IACJ,CAAE;IAAAH,QAAA,EACGA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEtC,CAAC;AAAC7B,EAAA,CA1CWF,mBAAmB;AAAAgC,EAAA,GAAnBhC,mBAAmB;AA4ChC,OAAO,MAAMiC,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,MAAMC,OAAO,GAAG1C,UAAU,CAACM,kBAAkB,CAAC;EAC9C,IAAI,CAACoC,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC7E;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}