{"ast":null,"code":"// import { createContext, useContext, useState, useEffect } from 'react';\n// import { fetchSpotifyDataWithQuip } from '../utils/api';\n\n// const SpotifyDataContext = createContext(null);\n\n// export const SpotifyDataProvider = ({ children }) => {\n//     const [data, setData] = useState({\n//         stats: {\n//             topArtists: [],\n//             topTracks: [],\n//             listeningClock: {\n//                 morning: [],\n//                 afternoon: [],\n//                 evening: [],\n//                 night: []\n//             },\n//             monthlyTrends: Array(12).fill(0),\n//             longestStreak: 0,\n//             mostStreamedSong: null,\n//             highestBpmTrack: null\n//         },\n//         quip: ''\n//     });\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const loadData = async () => {\n//             try {\n//                 setIsLoading(true);\n//                 const responseData = await fetchSpotifyDataWithQuip();\n//                 setData(responseData);\n//             } catch (err) {\n//                 console.error('Error loading Spotify data:', err);\n//                 setError('Failed to load Spotify data');\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n//         loadData();\n//     }, []);\n\n//     return (\n//         <SpotifyDataContext.Provider value={{\n//             spotifyData: data.stats,\n//             quip: data.quip,\n//             isLoading,\n//             error\n//         }}>\n//             {children}\n//         </SpotifyDataContext.Provider>\n//     );\n// };\n\n// export const useSpotifyData = () => {\n//     const context = useContext(SpotifyDataContext);\n//     if (!context) {\n//         throw new Error('useSpotifyData must be used within SpotifyDataProvider');\n//     }\n//     return context;\n// };","map":{"version":3,"names":[],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/context/SpotifyDataContext.jsx"],"sourcesContent":["// import { createContext, useContext, useState, useEffect } from 'react';\r\n// import { fetchSpotifyDataWithQuip } from '../utils/api';\r\n\r\n// const SpotifyDataContext = createContext(null);\r\n\r\n// export const SpotifyDataProvider = ({ children }) => {\r\n//     const [data, setData] = useState({\r\n//         stats: {\r\n//             topArtists: [],\r\n//             topTracks: [],\r\n//             listeningClock: {\r\n//                 morning: [],\r\n//                 afternoon: [],\r\n//                 evening: [],\r\n//                 night: []\r\n//             },\r\n//             monthlyTrends: Array(12).fill(0),\r\n//             longestStreak: 0,\r\n//             mostStreamedSong: null,\r\n//             highestBpmTrack: null\r\n//         },\r\n//         quip: ''\r\n//     });\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [error, setError] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const loadData = async () => {\r\n//             try {\r\n//                 setIsLoading(true);\r\n//                 const responseData = await fetchSpotifyDataWithQuip();\r\n//                 setData(responseData);\r\n//             } catch (err) {\r\n//                 console.error('Error loading Spotify data:', err);\r\n//                 setError('Failed to load Spotify data');\r\n//             } finally {\r\n//                 setIsLoading(false);\r\n//             }\r\n//         };\r\n//         loadData();\r\n//     }, []);\r\n\r\n//     return (\r\n//         <SpotifyDataContext.Provider value={{\r\n//             spotifyData: data.stats,\r\n//             quip: data.quip,\r\n//             isLoading,\r\n//             error\r\n//         }}>\r\n//             {children}\r\n//         </SpotifyDataContext.Provider>\r\n//     );\r\n// };\r\n\r\n// export const useSpotifyData = () => {\r\n//     const context = useContext(SpotifyDataContext);\r\n//     if (!context) {\r\n//         throw new Error('useSpotifyData must be used within SpotifyDataProvider');\r\n//     }\r\n//     return context;\r\n// };"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}