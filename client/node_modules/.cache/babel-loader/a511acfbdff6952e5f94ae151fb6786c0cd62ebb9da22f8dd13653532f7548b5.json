{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adwit\\\\Better-Spotify-Wrapped\\\\client\\\\src\\\\context\\\\SpotifyDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchSpotifyDataWithQuip } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyDataContext = /*#__PURE__*/createContext(null);\nexport const SpotifyDataProvider = ({\n  children\n}) => {\n  _s();\n  const [data, setData] = useState({\n    stats: {\n      topArtists: [],\n      topTracks: [],\n      listeningClock: {\n        morning: [],\n        afternoon: [],\n        evening: [],\n        night: []\n      },\n      monthlyTrends: Array(12).fill(0),\n      longestStreak: 0,\n      mostStreamedSong: '',\n      highestBpmTrack: ''\n    },\n    quip: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const responseData = await fetchSpotifyDataWithQuip();\n        setData(responseData);\n      } catch (err) {\n        setError('Failed to load Spotify data');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SpotifyDataContext.Provider, {\n    value: {\n      spotifyData: data.stats,\n      quip: data.quip,\n      isLoading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(SpotifyDataProvider, \"EmTKDcwQhZT5OeABvtJetqjvrQo=\");\n_c = SpotifyDataProvider;\nexport const useSpotifyData = () => {\n  _s2();\n  const context = useContext(SpotifyDataContext);\n  if (!context) {\n    throw new Error('useSpotifyData must be used within SpotifyDataProvider');\n  }\n  return context;\n};\n_s2(useSpotifyData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SpotifyDataProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","fetchSpotifyDataWithQuip","jsxDEV","_jsxDEV","SpotifyDataContext","SpotifyDataProvider","children","_s","data","setData","stats","topArtists","topTracks","listeningClock","morning","afternoon","evening","night","monthlyTrends","Array","fill","longestStreak","mostStreamedSong","highestBpmTrack","quip","isLoading","setIsLoading","error","setError","loadData","responseData","err","console","Provider","value","spotifyData","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSpotifyData","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/context/SpotifyDataContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { fetchSpotifyDataWithQuip } from '../utils/api';\r\n\r\nconst SpotifyDataContext = createContext(null);\r\n\r\nexport const SpotifyDataProvider = ({ children }) => {\r\n    const [data, setData] = useState({\r\n        stats: {\r\n            topArtists: [],\r\n            topTracks: [],\r\n            listeningClock: {\r\n                morning: [],\r\n                afternoon: [],\r\n                evening: [],\r\n                night: []\r\n            },\r\n            monthlyTrends: Array(12).fill(0),\r\n            longestStreak: 0,\r\n            mostStreamedSong: '',\r\n            highestBpmTrack: ''\r\n        },\r\n        quip: ''\r\n    });\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            try {\r\n                const responseData = await fetchSpotifyDataWithQuip();\r\n                setData(responseData);\r\n            } catch (err) {\r\n                setError('Failed to load Spotify data');\r\n                console.error(err);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <SpotifyDataContext.Provider value={{\r\n            spotifyData: data.stats,\r\n            quip: data.quip,\r\n            isLoading,\r\n            error\r\n        }}>\r\n            {children}\r\n        </SpotifyDataContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useSpotifyData = () => {\r\n    const context = useContext(SpotifyDataContext);\r\n    if (!context) {\r\n        throw new Error('useSpotifyData must be used within SpotifyDataProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,wBAAwB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,kBAAkB,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAE9C,OAAO,MAAMQ,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAC7BW,KAAK,EAAE;MACHC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,cAAc,EAAE;QACZC,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACX,CAAC;MACDC,aAAa,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAChCC,aAAa,EAAE,CAAC;MAChBC,gBAAgB,EAAE,EAAE;MACpBC,eAAe,EAAE;IACrB,CAAC;IACDC,IAAI,EAAE;EACV,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAM6B,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAI;QACA,MAAMC,YAAY,GAAG,MAAM7B,wBAAwB,CAAC,CAAC;QACrDQ,OAAO,CAACqB,YAAY,CAAC;MACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVH,QAAQ,CAAC,6BAA6B,CAAC;QACvCI,OAAO,CAACL,KAAK,CAACI,GAAG,CAAC;MACtB,CAAC,SAAS;QACNL,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IACDG,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI1B,OAAA,CAACC,kBAAkB,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAChCC,WAAW,EAAE3B,IAAI,CAACE,KAAK;MACvBc,IAAI,EAAEhB,IAAI,CAACgB,IAAI;MACfC,SAAS;MACTE;IACJ,CAAE;IAAArB,QAAA,EACGA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEtC,CAAC;AAAChC,EAAA,CA9CWF,mBAAmB;AAAAmC,EAAA,GAAnBnC,mBAAmB;AAgDhC,OAAO,MAAMoC,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,MAAMC,OAAO,GAAG7C,UAAU,CAACM,kBAAkB,CAAC;EAC9C,IAAI,CAACuC,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC7E;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}