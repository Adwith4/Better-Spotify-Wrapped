{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  withCredentials: true\n});\naxiosRetry(api, {\n  retries: 3,\n  retryDelay: axiosRetry.exponentialDelay,\n  retryCondition: error => {\n    var _error$response;\n    return axiosRetry.isNetworkOrIdempotentRequestError(error) || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 500;\n  }\n});\nlet cachedData = null;\nlet quipCooldown = false;\nexport const fetchSpotifyDataWithQuip = async () => {\n  var _spotifyData$data, _spotifyData$data$top;\n  if (cachedData) return cachedData;\n  if (quipCooldown) return cachedData; // Skip if cooldown is active\n\n  quipCooldown = true;\n  setTimeout(() => quipCooldown = false, 5000); // Cooldown for 5 seconds\n\n  const spotifyData = await api.get('/fetch-spotify-data');\n  if ((_spotifyData$data = spotifyData.data) !== null && _spotifyData$data !== void 0 && (_spotifyData$data$top = _spotifyData$data.topArtists) !== null && _spotifyData$data$top !== void 0 && _spotifyData$data$top.length) {\n    const artistNames = spotifyData.data.topArtists.map(artist => artist.name).slice(0, 5).join(', ');\n    const quipResponse = await api.post('/generate-quip', {\n      statDescription: `Your top artists are: ${artistNames}`\n    });\n    return {\n      stats: spotifyData.data,\n      quip: quipResponse.data.quip\n    };\n  }\n  return {\n    stats: spotifyData.data,\n    quip: ''\n  };\n};\nexport const fetchUserProfile = async () => {\n  const response = await api.get('/user-profile');\n  return response.data;\n};\nexport const fetchTopArtists = async () => {\n  const response = await api.get('/stats/me/artists');\n  return response.data;\n};\nexport const fetchTopTracks = async () => {\n  const response = await api.get('/stats/me/tracks');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","axiosRetry","api","create","baseURL","withCredentials","retries","retryDelay","exponentialDelay","retryCondition","error","_error$response","isNetworkOrIdempotentRequestError","response","status","cachedData","quipCooldown","fetchSpotifyDataWithQuip","_spotifyData$data","_spotifyData$data$top","setTimeout","spotifyData","get","data","topArtists","length","artistNames","map","artist","name","slice","join","quipResponse","post","statDescription","stats","quip","fetchUserProfile","fetchTopArtists","fetchTopTracks"],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3001/api',\r\n  withCredentials: true,\r\n});\r\n\r\naxiosRetry(api, { \r\n  retries: 3,\r\n  retryDelay: axiosRetry.exponentialDelay,\r\n  retryCondition: (error) => {\r\n    return axiosRetry.isNetworkOrIdempotentRequestError(error) || error.response?.status === 500;\r\n  }\r\n});\r\n\r\nlet cachedData = null;\r\nlet quipCooldown = false;\r\n\r\nexport const fetchSpotifyDataWithQuip = async () => {\r\n    if (cachedData) return cachedData;\r\n    if (quipCooldown) return cachedData; // Skip if cooldown is active\r\n\r\n    quipCooldown = true;\r\n    setTimeout(() => (quipCooldown = false), 5000); // Cooldown for 5 seconds\r\n\r\n  const spotifyData = await api.get('/fetch-spotify-data');\r\n  \r\n  if (spotifyData.data?.topArtists?.length) {\r\n    const artistNames = spotifyData.data.topArtists\r\n      .map(artist => artist.name)\r\n      .slice(0, 5)\r\n      .join(', ');\r\n      \r\n    const quipResponse = await api.post('/generate-quip', {\r\n      statDescription: `Your top artists are: ${artistNames}`\r\n    });\r\n    \r\n    return {\r\n      stats: spotifyData.data,\r\n      quip: quipResponse.data.quip\r\n    };\r\n  }\r\n  \r\n  return {\r\n    stats: spotifyData.data,\r\n    quip: ''\r\n  };\r\n};\r\n\r\nexport const fetchUserProfile = async () => {\r\n  const response = await api.get('/user-profile');\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTopArtists = async () => {\r\n  const response = await api.get('/stats/me/artists');\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTopTracks = async () => {\r\n  const response = await api.get('/stats/me/tracks');\r\n  return response.data;\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,aAAa;AAEpC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEFJ,UAAU,CAACC,GAAG,EAAE;EACdI,OAAO,EAAE,CAAC;EACVC,UAAU,EAAEN,UAAU,CAACO,gBAAgB;EACvCC,cAAc,EAAGC,KAAK,IAAK;IAAA,IAAAC,eAAA;IACzB,OAAOV,UAAU,CAACW,iCAAiC,CAACF,KAAK,CAAC,IAAI,EAAAC,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG;EAC9F;AACF,CAAC,CAAC;AAEF,IAAIC,UAAU,GAAG,IAAI;AACrB,IAAIC,YAAY,GAAG,KAAK;AAExB,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAAA,IAAAC,iBAAA,EAAAC,qBAAA;EAChD,IAAIJ,UAAU,EAAE,OAAOA,UAAU;EACjC,IAAIC,YAAY,EAAE,OAAOD,UAAU,CAAC,CAAC;;EAErCC,YAAY,GAAG,IAAI;EACnBI,UAAU,CAAC,MAAOJ,YAAY,GAAG,KAAM,EAAE,IAAI,CAAC,CAAC,CAAC;;EAElD,MAAMK,WAAW,GAAG,MAAMnB,GAAG,CAACoB,GAAG,CAAC,qBAAqB,CAAC;EAExD,KAAAJ,iBAAA,GAAIG,WAAW,CAACE,IAAI,cAAAL,iBAAA,gBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBM,UAAU,cAAAL,qBAAA,eAA5BA,qBAAA,CAA8BM,MAAM,EAAE;IACxC,MAAMC,WAAW,GAAGL,WAAW,CAACE,IAAI,CAACC,UAAU,CAC5CG,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAC1BC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,IAAI,CAAC,IAAI,CAAC;IAEb,MAAMC,YAAY,GAAG,MAAM9B,GAAG,CAAC+B,IAAI,CAAC,gBAAgB,EAAE;MACpDC,eAAe,EAAE,yBAAyBR,WAAW;IACvD,CAAC,CAAC;IAEF,OAAO;MACLS,KAAK,EAAEd,WAAW,CAACE,IAAI;MACvBa,IAAI,EAAEJ,YAAY,CAACT,IAAI,CAACa;IAC1B,CAAC;EACH;EAEA,OAAO;IACLD,KAAK,EAAEd,WAAW,CAACE,IAAI;IACvBa,IAAI,EAAE;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMxB,QAAQ,GAAG,MAAMX,GAAG,CAACoB,GAAG,CAAC,eAAe,CAAC;EAC/C,OAAOT,QAAQ,CAACU,IAAI;AACtB,CAAC;AAED,OAAO,MAAMe,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMzB,QAAQ,GAAG,MAAMX,GAAG,CAACoB,GAAG,CAAC,mBAAmB,CAAC;EACnD,OAAOT,QAAQ,CAACU,IAAI;AACtB,CAAC;AAED,OAAO,MAAMgB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAM1B,QAAQ,GAAG,MAAMX,GAAG,CAACoB,GAAG,CAAC,kBAAkB,CAAC;EAClD,OAAOT,QAAQ,CAACU,IAAI;AACtB,CAAC;AAED,eAAerB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}