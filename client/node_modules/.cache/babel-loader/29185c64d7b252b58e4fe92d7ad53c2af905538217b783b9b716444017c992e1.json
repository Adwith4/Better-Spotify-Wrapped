{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adwit\\\\Better-Spotify-Wrapped\\\\client\\\\src\\\\context\\\\SpotifyDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchSpotifyDataWithQuip } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyDataContext = /*#__PURE__*/createContext(null);\nexport const SpotifyDataProvider = ({\n  children\n}) => {\n  _s();\n  const [spotifyData, setSpotifyData] = useState({\n    topArtists: [],\n    topTracks: [],\n    topAlbums: [],\n    topGenres: [],\n    listeningClock: {},\n    monthlyTrends: [],\n    longestStreak: 0,\n    mostStreamedSong: '',\n    highestBpmTrack: ''\n  });\n  const [quip, setQuip] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchSpotifyDataWithQuip();\n        setSpotifyData(data.stats);\n        setQuip(data.quip);\n      } catch (err) {\n        setError('Failed to load Spotify data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SpotifyDataContext.Provider, {\n    value: {\n      spotifyData,\n      quip,\n      error,\n      isLoading,\n      setQuip\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotifyDataProvider, \"I1rwJgbT80LWzRTv988PG4eyWDo=\");\n_c = SpotifyDataProvider;\nexport const useSpotifyData = () => {\n  _s2();\n  const context = useContext(SpotifyDataContext);\n  if (!context) {\n    throw new Error('useSpotifyData must be used within a SpotifyDataProvider');\n  }\n  return context;\n};\n_s2(useSpotifyData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SpotifyDataProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","fetchSpotifyDataWithQuip","jsxDEV","_jsxDEV","SpotifyDataContext","SpotifyDataProvider","children","_s","spotifyData","setSpotifyData","topArtists","topTracks","topAlbums","topGenres","listeningClock","monthlyTrends","longestStreak","mostStreamedSong","highestBpmTrack","quip","setQuip","error","setError","isLoading","setIsLoading","fetchData","data","stats","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSpotifyData","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adwit/Better-Spotify-Wrapped/client/src/context/SpotifyDataContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { fetchSpotifyDataWithQuip } from '../utils/api';\r\n\r\nconst SpotifyDataContext = createContext(null);\r\n\r\nexport const SpotifyDataProvider = ({ children }) => {\r\n  const [spotifyData, setSpotifyData] = useState({\r\n    topArtists: [],\r\n    topTracks: [],\r\n    topAlbums: [],\r\n    topGenres: [],\r\n    listeningClock: {},\r\n    monthlyTrends: [],\r\n    longestStreak: 0,\r\n    mostStreamedSong: '',\r\n    highestBpmTrack: ''\r\n  });\r\n  const [quip, setQuip] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await fetchSpotifyDataWithQuip();\r\n        setSpotifyData(data.stats);\r\n        setQuip(data.quip);\r\n      } catch (err) {\r\n        setError('Failed to load Spotify data');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <SpotifyDataContext.Provider value={{ \r\n      spotifyData, \r\n      quip, \r\n      error, \r\n      isLoading,\r\n      setQuip \r\n    }}>\r\n      {children}\r\n    </SpotifyDataContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSpotifyData = () => {\r\n  const context = useContext(SpotifyDataContext);\r\n  if (!context) {\r\n    throw new Error('useSpotifyData must be used within a SpotifyDataProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,wBAAwB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,kBAAkB,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAE9C,OAAO,MAAMQ,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC;IAC7CW,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,EAAE;IACbC,cAAc,EAAE,CAAC,CAAC;IAClBC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,CAAC;IAChBC,gBAAgB,EAAE,EAAE;IACpBC,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMzB,wBAAwB,CAAC,CAAC;QAC7CQ,cAAc,CAACiB,IAAI,CAACC,KAAK,CAAC;QAC1BP,OAAO,CAACM,IAAI,CAACP,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZN,QAAQ,CAAC,6BAA6B,CAAC;MACzC,CAAC,SAAS;QACRE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IACDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtB,OAAA,CAACC,kBAAkB,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAClCtB,WAAW;MACXW,IAAI;MACJE,KAAK;MACLE,SAAS;MACTH;IACF,CAAE;IAAAd,QAAA,EACCA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;AAAC3B,EAAA,CA1CWF,mBAAmB;AAAA8B,EAAA,GAAnB9B,mBAAmB;AA4ChC,OAAO,MAAM+B,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGxC,UAAU,CAACM,kBAAkB,CAAC;EAC9C,IAAI,CAACkC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}